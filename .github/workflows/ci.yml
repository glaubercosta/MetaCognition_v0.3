name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  hygiene:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Secrets pattern check (simple)
        shell: bash
        run: |
          set -euo pipefail
          PATTERN='(AWS_|SECRET|API_KEY|TOKEN|PASSWORD|BEGIN RSA PRIVATE KEY)'
          ALLOWLIST='(\.example$|README|CHANGELOG|INTEGRATION_NOTES|INTEGRACAO_DESIGN)'
          matches=$(git ls-files | xargs -r grep -nE "$PATTERN" || true)
          if [[ -n "$matches" ]]; then
            filtered=$(echo "$matches" | grep -Ev "$ALLOWLIST" || true)
            if [[ -n "$filtered" ]]; then
              echo "Potential secrets detected:" >&2
              echo "$filtered" >&2
              exit 1
            fi
          fi
      - name: Check for banned paths in tracked files
        shell: bash
        run: |
          set -euo pipefail
          banned=$(git ls-files | grep -E "(__pycache__|\.pyc$|^public/assets/|^frontend/(dist|node_modules)/)" || true)
          if [[ -n "$banned" ]]; then
            echo "Banned tracked files detected:" >&2
            echo "$banned" >&2
            exit 1
          fi
      - name: Check large tracked files (>5MB), allowlist ProjectArtifacts/**
        shell: bash
        run: |
          set -euo pipefail
          rc=0
          while IFS= read -r -d '' f; do
            # allowlist project artifacts
            if [[ "$f" == ProjectArtifacts/* ]]; then continue; fi
            sz=$(stat -c%s "$f")
            if (( sz > 5242880 )); then
              echo "Large tracked file (>5MB): $f ($sz bytes)" >&2
              rc=1
            fi
          done < <(git ls-files -z)
          exit $rc
  test:
    runs-on: ubuntu-latest
    needs: [hygiene]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: pytest -q --cov=app --cov-report=term-missing --cov-report=xml:coverage.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  build-docker:
    runs-on: ubuntu-latest
    needs: [hygiene, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t metacognition:ci -f docker/Dockerfile .


  lint:
    runs-on: ubuntu-latest
    needs: [hygiene]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install ruff
        run: pip install ruff
      - name: Ruff check
        run: ruff check .
